{
  "version": 3,
  "sources": ["neurons/noteCalculator.ts", "neurons/returnSurroundingElements.ts", "neurons/synthProto.ts", "neurons/copyBuffer.ts", "neurons/playMusic.ts", "brain.ts"],
  "sourcesContent": ["/**\n * @function calculateNotes determines what note to play for @param padId pad\n * @returns [frequency to play, KEY CHANGE frequency to play]\n *\n * @description: I never want to do this math ever again\n */\nconst calculateNotes = (padId: number, gridSize: number) => {\n    const rowLen = Math.sqrt(gridSize);\n\n    const tuning = 440;\n    const A440 = Math.pow(2, 1 / 12);\n    const row = Math.floor((padId - 1) / rowLen) + 1;\n    padId = padId - row * 5 - 17;\n    const octave = Math.floor(padId / 7 + 2);\n\n    if ((padId + 7) % 7 === 0) padId = padId + octave * 5;\n    else if ((padId + 6) % 7 === 0) padId = padId + octave * 5 + 1;\n    else if ((padId + 5) % 7 === 0) padId = padId + octave * 5 + 2;\n    else if ((padId + 4) % 7 === 0) padId = padId + octave * 5 + 2;\n    else if ((padId + 3) % 7 === 0) padId = padId + octave * 5 + 3;\n    else if ((padId + 2) % 7 === 0) padId = padId + octave * 5 + 4;\n    else if ((padId + 1) % 7 === 0) padId = padId + octave * 5 + 5;\n\n    return [\n        // Standard notes / G major scale\n        +(tuning * Math.pow(A440, padId)).toFixed(4),\n        // ^ minor third key change / Bb Major\n        +(tuning * Math.pow(A440, padId + 3)).toFixed(4),\n    ];\n};\n\nexport default calculateNotes;\n", "/**\n * @function returnSurroundingElements return pads surrounding another pad\n */\nconst returnSurroundingElements = (gridSize: number, idArray: number[], padId: number) => {\n    const rowLen = Math.sqrt(gridSize);\n    const al = padId + rowLen - 1;\n    const a = padId + rowLen;\n    const ar = padId + rowLen + 1;\n    const l = padId - 1;\n    const r = padId + 1;\n    const bl = padId - rowLen - 1;\n    const b = padId - rowLen;\n    const br = padId - rowLen + 1;\n\n    return [al, a, ar, l, r, bl, b, br]\n        .map((surrounding) => {\n            return idArray.includes(surrounding);\n        })\n        .filter((isActive) => isActive !== false);\n};\n\nexport default returnSurroundingElements;\n", "/**\n * @class individual synthesizer\n * @param i oscillatorNode's frequency\n * @oscillatoreEngineType random waveform type at generation\n */\nclass Synth {\n    private types: string[];\n    oscillatorEngine: OscillatorNode;\n    audioContext: AudioContext;\n    gainNode: GainNode;\n\n    constructor(i: number) {\n        this.types = [\"sawtooth\", \"sine\", \"square\", \"triangle\"];\n        this.audioContext = new window.AudioContext();\n\n        this.oscillatorEngine = this.audioContext.createOscillator();\n        this.oscillatorEngine.type = this.types[Math.floor(Math.random() * 4)] as OscillatorType;\n        this.oscillatorEngine.frequency.setValueAtTime(i, this.audioContext.currentTime);\n\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = 0.1;\n        this.gainNode.connect(this.audioContext.destination);\n    }\n}\n\nexport default Synth;\n", "/**\n * @function copyBuffer @returns true copy of impulse response array buffer\n */\nconst copyBuffer = (buffer: ArrayBuffer) => {\n    let copy = new ArrayBuffer(buffer.byteLength);\n    new Uint8Array(copy).set(new Uint8Array(buffer));\n    return copy;\n};\n\nexport default copyBuffer;\n", "import Synth from \"./synthProto\";\nimport copyBuffer from \"./copyBuffer\";\n\n/**\n * @function playMusic create/start/stop pad oscillator\n * @function createReverb create convolution reverb\n * @param noteFreq frequency of the note to play (determined at grid creation)\n *\n * @function connect/start/stop/disconnect control audioContext or oscillator\n */\nconst playMusic = async (noteFreq: number, arrayBuffer: ArrayBuffer, speed: number) => {\n    const synth = new Synth(noteFreq);\n\n    const createReverb = async () => {\n        let convolver = synth.audioContext.createConvolver();\n        const bufferCopy = copyBuffer(arrayBuffer.slice(0));\n        convolver.buffer = await synth.audioContext.decodeAudioData(bufferCopy);\n        return convolver;\n    };\n\n    const reverb = await createReverb();\n    reverb.connect(synth.gainNode);\n    synth.oscillatorEngine.connect(reverb);\n    synth.oscillatorEngine.start();\n\n    const noteBuffer = new Promise((res) => setTimeout(res, speed * 0.85));\n    await noteBuffer.then(() => {\n        synth.oscillatorEngine.stop();\n        synth.oscillatorEngine.disconnect();\n    });\n\n    const reverbBuffer = new Promise((res) => setTimeout(res, speed * 1.45));\n    await reverbBuffer.then(() => {\n        synth.audioContext.close();\n    });\n};\n\nexport default playMusic;\n", "import calculateNotes from \"./neurons/noteCalculator\";\nimport returnSurroundingElements from \"./neurons/returnSurroundingElements\";\nimport playMusic from \"./neurons/playMusic\";\n\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n    // Grid/pad info\n    type PadArray = HTMLDivElement[];\n    const allPads = [...document.querySelectorAll(\".pad\")] as PadArray;\n    let activePads: PadArray = [];\n    const grid: HTMLElement = document.querySelector(\".grid\")!;\n    const gridSize = allPads.length;\n\n    // Buttons\n    const playButton = document.querySelector(\".playButton\");\n    const resetButton = document.querySelector(\".resetButton\");\n    const modeButton = document.querySelector(\".modeButton\");\n\n    // Statistics\n    const automatonNumber = 3;\n    const speed = 2500;\n\n    let mode = \"Mode: Classic\";\n    let timer: number;\n    let isPlaying: boolean = false;\n    let generation: number = 0;\n    let generationLog: Array<PadArray> = [];\n\n    // Audio components\n    // CORS for local development\n    const cors = window.location.href.includes(\"file\")\n        ? \"https://cors-anywhere.herokuapp.com/\"\n        : \"\";\n    let response = await fetch(`${cors}https://jameslewis.io/assets/Output%201-2.wav`);\n    let arrayBuffer: ArrayBuffer = await response.arrayBuffer();\n\n    /**\n     * @function updateState update elements when isPlaying changes\n     */\n    const updateState = () => {\n        playButton!.innerHTML = isPlaying ? \"Stop\" : \"Play\";\n        grid!.className = isPlaying ? \"main grid playing\" : \"main grid\";\n        modeButton!.className = isPlaying ? \"modeButton playing\" : \"modeButton\";\n    };\n\n    /**\n     * @function resetState reset grid\n     */\n    const resetState = () => {\n        isPlaying = false;\n        clearInterval(timer);\n        updateState();\n\n        activePads.forEach((pad) => {\n            pad.classList.remove(\"active\");\n        });\n\n        generation = 0;\n        generationLog = [];\n        activePads = [];\n    };\n\n    /**\n     * @function generationController compare current pattern to previous pattern, destroy all if plateaued\n     *\n     * @function resetState reset grid\n     */\n    const generationController = () => {\n        ++generation;\n        generationLog.push(activePads);\n\n        if (generationLog.length > 2) {\n            generationLog.shift();\n\n            const [lastGen, currentGen] = generationLog.map((array) => {\n                let ids = array.map((div) => div.id);\n                if (ids.length > 0) return array.map((div) => div.id).reduce((a, b) => a + b);\n                return \"empty\";\n            });\n\n            if (lastGen === currentGen) resetState();\n        }\n    };\n\n    /**\n     * @function classicMode play notes according to Conyway's Game of Life\n     */\n    const classicMode = (\n        pad: HTMLDivElement,\n        _padId: number,\n        isActive: boolean,\n        surroundingNum: number\n    ) => {\n        if (\n            (!isActive && surroundingNum === automatonNumber) ||\n            (isActive &&\n                (surroundingNum === automatonNumber || surroundingNum === automatonNumber - 1))\n        ) {\n            if (!activePads.includes(pad)) activePads.push(pad);\n            if (!isActive) pad.classList.add(\"active\");\n            pad.click();\n        } else {\n            activePads = activePads.filter((item) => item !== pad);\n            if (isActive) pad.classList.remove(\"active\");\n        }\n    };\n\n    /**\n     * @function randomMode every note has 1/10 change in playing\n     */\n    const randomMode = (pad: HTMLDivElement, _padId: number, isActive: boolean) => {\n        if (Math.floor(Math.random() * 10) === 0) {\n            if (!activePads.includes(pad)) activePads.push(pad);\n            if (!isActive) pad.classList.add(\"active\");\n            pad.click();\n        } else {\n            activePads = activePads.filter((item) => item !== pad);\n            if (isActive) pad.classList.remove(\"active\");\n        }\n    };\n\n    /**\n     * @function allPads.forEach grid setup / calculate frequencies associated with each pad\n     * @function clickEvent select/de-select pads individually\n     *\n     * @function playMusic create/start/stop pad oscillator\n     */\n    allPads.forEach((pad, padId) => {\n        const boxNum = gridSize - padId;\n        const [padNotes, keyChangeNotes] = calculateNotes(boxNum, gridSize);\n        pad.id = `${boxNum}`;\n\n        pad.addEventListener(\"click\", () => {\n            // Select/de-select/preview notes for autoPlay\n            if (!isPlaying) {\n                if (!activePads.includes(pad)) {\n                    activePads.push(pad);\n                    pad.classList.add(\"active\");\n                    playMusic(padNotes as number, arrayBuffer, speed);\n                } else {\n                    activePads = activePads.filter((item) => item !== pad);\n                    pad.classList.remove(\"active\");\n                }\n            }\n\n            if (isPlaying) {\n                // Play notes (controlled by autoPlay)\n                if (Math.floor(generation / 4) % 2 === 0)\n                    playMusic(padNotes as number, arrayBuffer, speed);\n                else playMusic(keyChangeNotes as number, arrayBuffer, speed);\n            }\n        });\n    });\n\n    /**\n     * @function autoPlay start cellular automaton transformations\n     */\n    const autoPlay = () => {\n        const activePadIds = activePads.map((activePad) => {\n            return +activePad.id;\n        });\n\n        /**\n         * @function allPads.forEach calculate surrounding active elements, then sustain/kill element\n         * @tutorial https://en.wikipedia.org/wiki/Cellular_automaton\n         *\n         * @function generationController compare current pattern to previous pattern, destroy all if plateaued\n         */\n        allPads.forEach((pad, padId) => {\n            const isActive = pad.classList.contains(\"active\");\n            const surroundingNum = returnSurroundingElements(\n                gridSize,\n                activePadIds,\n                +pad.id\n            ).length;\n\n            if (mode === \"Mode: Classic\") classicMode(pad, padId, isActive, surroundingNum);\n            if (mode === \"Mode: Random\") randomMode(pad, padId, isActive);\n        });\n        generationController();\n    };\n\n    /**\n     * @functions button click events\n     */\n    playButton?.addEventListener(\"click\", () => {\n        isPlaying = !isPlaying;\n        updateState();\n\n        if (isPlaying === true) {\n            autoPlay();\n            timer = setInterval(() => autoPlay(), speed);\n        } else clearInterval(timer);\n    });\n\n    resetButton?.addEventListener(\"click\", () => {\n        resetState();\n    });\n\n    modeButton?.addEventListener(\"click\", () => {\n        if (mode === \"Mode: Random\") mode = \"Mode: Classic\";\n        else mode = \"Mode: Random\";\n        modeButton.innerHTML = mode;\n    });\n});\n"],
  "mappings": "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",
  "names": ["calculateNotes", "noteCalculator_default", "init_noteCalculator", "__esmMin", "padId", "gridSize", "rowLen", "tuning", "A440", "row", "octave", "returnSurroundingElements", "returnSurroundingElements_default", "init_returnSurroundingElements", "__esmMin", "gridSize", "idArray", "padId", "rowLen", "al", "a", "ar", "l", "bl", "br", "surrounding", "isActive", "Synth", "synthProto_default", "init_synthProto", "__esmMin", "i", "copyBuffer", "copyBuffer_default", "init_copyBuffer", "__esmMin", "buffer", "copy", "playMusic", "playMusic_default", "init_playMusic", "__esmMin", "init_synthProto", "init_copyBuffer", "noteFreq", "arrayBuffer", "speed", "__async", "synth", "synthProto_default", "reverb", "convolver", "bufferCopy", "copyBuffer_default", "res", "require_brain", "__commonJSMin", "exports", "init_noteCalculator", "init_returnSurroundingElements", "init_playMusic", "__async", "allPads", "activePads", "grid", "gridSize", "playButton", "resetButton", "modeButton", "automatonNumber", "speed", "mode", "timer", "isPlaying", "generation", "generationLog", "cors", "arrayBuffer", "updateState", "resetState", "pad", "generationController", "lastGen", "currentGen", "array", "div", "a", "b", "classicMode", "_padId", "isActive", "surroundingNum", "item", "randomMode", "padId", "boxNum", "padNotes", "keyChangeNotes", "noteCalculator_default", "playMusic_default", "autoPlay", "activePadIds", "activePad", "returnSurroundingElements_default"]
}
